#[cfg(not(feature = "geode"))]
use crate::{game::PlayLayer, hooks};

use crate::{
    clickpack::{Button, ClickType, Clickpack, Pitch, Timings, VolumeSettings},
    utils,
};
use anyhow::Result;
use egui::{
    emath, pos2, vec2, Align2, Color32, Direction, DragValue, Key, KeyboardShortcut, Modifiers,
    RichText,
};
use egui_keybind::{Bind, Keybind, Shortcut};
use egui_modal::{Icon, Modal};
use egui_toast::{Toast, ToastKind, ToastOptions, Toasts};
use kittyaudio::{Device, Mixer, PlaybackRate, SoundHandle, StreamSettings};
use once_cell::sync::Lazy;
use rfd::FileDialog;
use serde::{Deserialize, Serialize};
use std::{
    ops::RangeInclusive,
    path::{Path, PathBuf},
    process::Command,
    sync::{
        atomic::{AtomicBool, Ordering},
        Arc, Mutex, Once,
    },
    time::{Duration, Instant},
};

#[cfg(not(features = "geode"))]
use windows::Win32::System::Console::{AllocConsole, FreeConsole};

/// Global bot state
pub static mut BOT: Lazy<Box<Bot>> = Lazy::new(Box::<Bot>::default);

pub mod built_info {
    // generated by build.rs
    include!(concat!(env!("OUT_DIR"), "/built.rs"));
}

#[derive(Serialize, Deserialize, Clone, PartialEq)]
pub struct Shortcuts {
    pub toggle_menu: Shortcut,
    pub toggle_bot: Shortcut,
    pub toggle_noise: Shortcut,
}

impl Default for Shortcuts {
    fn default() -> Self {
        Self {
            toggle_menu: Shortcut::new(
                Some(KeyboardShortcut::new(Modifiers::NONE, Key::Num1)),
                None,
            ),
            toggle_bot: Shortcut::new(
                Some(KeyboardShortcut::new(Modifiers::NONE, Key::Num2)),
                None,
            ),
            toggle_noise: Shortcut::NONE,
        }
    }
}

#[derive(Serialize, Deserialize, Default, Clone)]
pub enum ClickpackEnv {
    #[default]
    None,
    Name(String),
    Path(PathBuf),
}

#[derive(Serialize, Deserialize, Clone)]
pub struct Env {
    version: String,
    clickpack_env: ClickpackEnv,
}

impl Default for Env {
    fn default() -> Self {
        Self {
            version: built_info::PKG_VERSION.to_string(),
            clickpack_env: ClickpackEnv::None,
        }
    }
}

impl Env {
    pub fn load() -> Self {
        let _ = std::fs::create_dir_all(".zcb")
            .map_err(|e| log::error!("failed to create .zcb directory: {e}"));

        let path = Path::new(".zcb/env.json");
        if let Ok(f) = std::fs::File::open(path) {
            let env = serde_json::from_reader(f);
            if let Ok(env) = env {
                return env;
            } else if let Err(e) = env {
                log::error!("failed to deserialize env: {e}");
            }
        }

        // if we're here we failed
        log::warn!("failed to deserialize env, writing defaults");
        if let Ok(f) = std::fs::File::create(path) {
            let _ = serde_json::to_writer_pretty(f, &Self::default())
                .map_err(|e| log::error!("failed to write env: {e}"));
        }

        Self::default()
    }

    pub fn save(&self) {
        log::info!("writing .zcb/env.json");
        let mut env = self.clone();
        env.version = built_info::PKG_VERSION.to_string();
        if let Ok(f) = std::fs::File::create(".zcb/env.json") {
            let _ = serde_json::to_writer_pretty(f, &env)
                .map_err(|e| log::error!("failed to write env: {e}"));
        }
    }

    pub fn update(&mut self, clickpack_env: ClickpackEnv) {
        self.clickpack_env = clickpack_env;
        self.save();
    }
}

#[inline]
fn true_value() -> bool {
    true
}

#[inline]
fn default_buffer_size() -> u32 {
    512
}

#[inline]
fn float_one<Num: emath::Numeric>() -> Num {
    Num::from_f64(1.0)
}

// clickpack, options, audio
#[derive(Serialize, Deserialize, Clone, PartialEq, Default, Copy)]
pub enum Stage {
    #[default]
    Clickpack,
    Audio,
    Options,
}

#[derive(Serialize, Deserialize, Clone, PartialEq)]
pub struct Config {
    pub pitch_enabled: bool,
    pub pitch: Pitch,
    pub timings: Timings,
    pub volume_settings: VolumeSettings,
    #[serde(default = "Shortcuts::default")]
    pub shortcuts: Shortcuts,
    #[serde(default = "true_value")]
    pub enabled: bool,
    #[serde(default = "bool::default")]
    pub hidden: bool,
    #[serde(default = "default_buffer_size")]
    pub buffer_size: u32,
    #[serde(default = "bool::default")]
    pub play_noise: bool,
    #[serde(default = "float_one")]
    pub noise_volume: f64,
    #[serde(default = "bool::default")]
    pub use_alternate_hook: bool,
    #[serde(default = "bool::default")]
    pub show_console: bool,
    #[serde(default = "Stage::default")]
    pub stage: Stage,
    #[serde(default = "bool::default")]
    pub use_fmod: bool,
    #[serde(default = "bool::default")]
    pub use_playlayer_time: bool,
    #[serde(default = "bool::default")]
    pub cut_sounds: bool,
    #[serde(default = "bool::default")]
    pub cut_by_releases: bool,
    #[serde(default = "float_one")]
    pub click_speedhack: f64,
    // #[serde(default = "true_value")]
    // pub sync_speed_with_game: bool,
    #[serde(default = "float_one")]
    pub noise_speedhack: f64,
}

impl Config {
    #[inline]
    pub fn fixup(mut self) -> Self {
        self.buffer_size = self.buffer_size.max(1);
        #[cfg(feature = "geode")]
        {
            self.show_console = false;
        }
        self
    }
}

impl Default for Config {
    fn default() -> Self {
        Self {
            pitch_enabled: true,
            pitch: Pitch::default(),
            timings: Timings::default(),
            volume_settings: VolumeSettings::default(),
            shortcuts: Shortcuts::default(),
            enabled: true,
            hidden: false,
            buffer_size: default_buffer_size(),
            play_noise: false,
            noise_volume: 1.0,
            use_alternate_hook: false,
            show_console: false,
            stage: Stage::default(),
            use_fmod: false,
            use_playlayer_time: false,
            cut_sounds: false,
            cut_by_releases: false,
            click_speedhack: 1.0,
            noise_speedhack: 1.0,
        }
    }
}

impl Config {
    pub fn load() -> Result<Self> {
        let mut path = PathBuf::from(".zcb/");
        log::debug!("creating directory {path:?}");
        std::fs::create_dir_all(&path)?;
        path.push("config.json");

        // try to read config
        log::debug!("trying to read config at {path:?}");
        if let Ok(f) = std::fs::File::open(&path) {
            let config = serde_json::from_reader(f)
                .map_err(|e| log::error!("failed to deserialize config at {path:?}: {e}"));
            if let Ok(config) = config {
                log::debug!("successfully read config at {path:?}");
                return Ok(config);
            }
        }

        // failed to read config, write default config
        let config = Self::default();
        log::debug!("creating file {path:?}");
        let f = std::fs::File::create(&path)?;
        log::debug!("writing default config to {path:?}");
        serde_json::to_writer_pretty(f, &config)?;
        Ok(config)
    }

    pub fn save(&self) {
        let Ok(f) = std::fs::File::create(".zcb/config.json") else {
            log::error!("failed to create config.json!");
            return;
        };
        let _ = serde_json::to_writer_pretty(f, self)
            .map_err(|e| log::error!("failed to write config: {e}"))
            .map(|_| log::debug!("successfully saved config to \".zcb/config.json\""));
    }
}

#[derive(Default)]
pub struct ClickTimes {
    jump: [f64; 2],  // 2 players
    left: [f64; 2],  // 2 players
    right: [f64; 2], // 2 players
}

impl ClickTimes {
    fn set_time(&mut self, button: Button, player2: bool, time: f64) {
        match button {
            Button::Jump => self.jump[player2 as usize] = time,
            Button::Left => self.left[player2 as usize] = time,
            Button::Right => self.right[player2 as usize] = time,
        }
    }

    fn get_prev_time(&self, button: Button, player2: bool) -> f64 {
        match button {
            Button::Left => self.left[player2 as usize],
            Button::Right => self.right[player2 as usize],
            Button::Jump => self.jump[player2 as usize],
        }
    }
}

pub struct Bot {
    pub conf: Config,
    pub mixer: Mixer,
    #[cfg(not(feature = "geode"))]
    pub playlayer: PlayLayer,
    pub prev_times: ClickTimes,
    pub is_loading_clickpack: Arc<AtomicBool>,
    pub last_conf_save: Instant,
    pub prev_conf: Config,
    pub prev_click_type: ClickType,
    pub prev_pitch: f64,
    pub prev_volume: f64,
    pub prev_spam_offset: f64,
    pub buffer_size_changed: bool,
    pub noise_sound: Option<SoundHandle>,
    pub did_reset_config: bool,
    pub clickpacks: Vec<PathBuf>,
    pub last_clickpack_reload: Instant,
    // pub system: *mut FMOD_SYSTEM,
    // pub channel: *mut FMOD_CHANNEL,
    pub env: Env,
    pub toast_queue: Arc<Mutex<Vec<Toast>>>,
    // pub fmod_noise_sound: *mut FMOD_CHANNEL,
    pub show_fmod_buffersize_warn: bool,
    pub startup_buffer_size: u32,
    pub is_in_level: bool,
    pub playlayer_time: f64,
    pub clickpack: Clickpack,
}

impl Default for Bot {
    fn default() -> Self {
        let conf = Config::load().unwrap_or_default().fixup();
        let startup_buffer_size = conf.buffer_size;
        Self {
            conf: conf.clone(),
            mixer: Mixer::new(),
            #[cfg(not(feature = "geode"))]
            playlayer: PlayLayer::NULL,
            prev_times: ClickTimes::default(),
            is_loading_clickpack: Arc::new(AtomicBool::new(false)),
            last_conf_save: Instant::now(),
            prev_conf: conf,
            prev_click_type: ClickType::None,
            prev_pitch: f64::NAN,
            prev_volume: f64::NAN,
            prev_spam_offset: f64::NAN,
            buffer_size_changed: false,
            noise_sound: None,
            did_reset_config: false,
            clickpacks: vec![],
            last_clickpack_reload: Instant::now(),
            // system: std::ptr::null_mut(),
            // channel: std::ptr::null_mut(),
            env: Env::load(),
            toast_queue: Arc::new(Mutex::new(vec![])),
            // fmod_noise_sound: std::ptr::null_mut(),
            show_fmod_buffersize_warn: false,
            startup_buffer_size,
            is_in_level: false,
            playlayer_time: 0.0,
            clickpack: Clickpack::default(),
        }
    }
}

fn help_text<R>(ui: &mut egui::Ui, help: &str, add_contents: impl FnOnce(&mut egui::Ui) -> R) {
    if help.is_empty() {
        add_contents(ui); // don't show help icon if there's no help text
        return;
    }
    ui.horizontal(|ui| {
        add_contents(ui);
        ui.add_enabled_ui(false, |ui| ui.label("(?)").on_disabled_hover_text(help));
    });
}

/// Value is always min clamped with 1.
fn u32_edit_field_min1(ui: &mut egui::Ui, value: &mut u32) -> egui::Response {
    let mut tmp_value = format!("{value}");
    let res = ui.text_edit_singleline(&mut tmp_value);
    if let Ok(result) = tmp_value.parse::<u32>() {
        *value = result.max(1);
    }
    res
}

/*
#[inline]
fn gd_audio_pitch() -> f32 {
    let mut pitch = 1.0f32;
    unsafe {
        let _ = FMOD_Channel_GetPitch(
            FMODAudioEngine::shared().current_sound_channel(),
            &mut pitch,
        );
    };
    pitch
}
*/

fn drag_value<Num: emath::Numeric>(
    ui: &mut egui::Ui,
    value: &mut Num,
    text: impl Into<String>,
    clamp_range: RangeInclusive<Num>,
    help: &str,
) -> egui::Response {
    let mut resp = None;
    help_text(ui, help, |ui| {
        resp = Some(
            ui.add(
                DragValue::new(value)
                    .clamp_range(clamp_range.clone())
                    .speed(0.01),
            ),
        );
        ui.label(
            if resp.as_ref().unwrap().dragged()
                && (clamp_range.start() == value || clamp_range.end() == value)
            {
                RichText::new(text).color(Color32::LIGHT_RED)
            } else {
                RichText::new(text)
            },
        );
    });
    resp.unwrap()
}

impl Bot {
    fn maybe_init_kittyaudio(&mut self) {
        if self.conf.use_fmod {
            return;
        }
        log::debug!("starting kittyaudio playback thread");
        self.mixer = Mixer::new();
        let device = self.get_device();

        self.mixer.init_ex(
            device,
            StreamSettings {
                buffer_size: Some(self.conf.buffer_size),
                ..Default::default()
            },
        );
    }

    pub unsafe fn init_fmod(&mut self) -> Result<()> {
        /*
        const SYSTEM_SAMPLERATE: i32 = 48_000;
        log::info!("initializing fmod system");
        if !self.system.is_null() {
            self.release_fmod();
        }

        FMOD_System_Create(&mut self.system, FMOD_VERSION).fmod_result()?;
        let extra_driver_data = FMODAudioEngine::shared().extra_driver_data();

        FMOD_System_SetSoftwareFormat(self.system, SYSTEM_SAMPLERATE, FMOD_SPEAKERMODE_STEREO, 0)
            .fmod_result()?;

        // set buffer size
        /*
        FMOD_System_SetStreamBufferSize(self.system, self.conf.buffer_size, FMOD_TIMEUNIT_PCM)
            .fmod_result()?;

        let mut numbuffers = 0i32;
        let mut bufferlength = 0u32;
        FMOD_System_GetDSPBufferSize(self.system, &mut bufferlength, &mut numbuffers)
            .fmod_result()?;
        log::info!(
            "FMOD_System_GetDSPBufferSize: bufferlength: {bufferlength}, numbuffers: {numbuffers}"
        );
        FMOD_System_SetDSPBufferSize(self.system, self.conf.buffer_size, numbuffers)
            .fmod_result()?;
        */

        // init system
        self.fmod_apply_buffer_size()?;
        FMOD_System_Init(self.system, 2048, FMOD_INIT_NORMAL, extra_driver_data).fmod_result()?;

        log::info!("successfully initialized fmod system, samplerate: {SYSTEM_SAMPLERATE}");
        */
        Ok(())
    }

    //fn fmod_apply_buffer_size(&self) -> Result<()> {
    //    /*
    //    unsafe {
    //        FMOD_System_SetStreamBufferSize(self.system, self.conf.buffer_size, FMOD_TIMEUNIT_PCM)
    //            .fmod_result()?;
    //
    //        let mut numbuffers = 0i32;
    //        let mut bufferlength = 0u32;
    //        FMOD_System_GetDSPBufferSize(self.system, &mut bufferlength, &mut numbuffers)
    //            .fmod_result()?;
    //        log::info!(
    //            "FMOD_System_GetDSPBufferSize: bufferlength: {bufferlength}, numbuffers: {numbuffers}"
    //        );
    //        FMOD_System_SetDSPBufferSize(self.system, self.conf.buffer_size, numbuffers)
    //            .fmod_result()?;
    //    }
    //    */
    //    Ok(())
    //}

    pub fn release_fmod(&mut self) {
        /*
        let _ = unsafe {
            FMOD_System_Release(self.system)
                .fmod_result()
                .map_err(|e| log::error!("failed to release fmod system: {e}"))
        };
        self.system = std::ptr::null_mut();
        */
    }

    pub fn init(&mut self) {
        // init audio playback
        if !self.conf.use_fmod {
            self.maybe_init_kittyaudio();
        }
        unsafe {
            let _ = self
                .init_fmod()
                .map_err(|e| log::error!("failed to init fmod: {e}"));
        };

        // reload clickpacks
        let _ = self
            .reload_clickpacks()
            .map_err(|e| log::error!("failed to reload clickpacks: {e}"));

        // check env
        let toast_queue = self.toast_queue.clone();
        let preload_clickpack = |path: PathBuf| {
            let is_loading_clickpack = self.is_loading_clickpack.clone();
            std::thread::spawn(move || {
                Self::load_clickpack_thread(
                    |e| {
                        toast_queue.lock().unwrap().push(Toast {
                            kind: ToastKind::Error,
                            text: format!("Failed to preload clickpack: {e}").into(),
                            options: ToastOptions::default().duration_in_seconds(5.0),
                        })
                    },
                    &path,
                    is_loading_clickpack,
                )
            });
        };

        // preload clickpack
        log::info!("preloading clickpack");
        match &self.env.clickpack_env {
            ClickpackEnv::Name(name) => {
                let mut found = false;
                for path in &self.clickpacks {
                    if path.file_name().unwrap().to_str().unwrap() == name {
                        preload_clickpack(path.clone());
                        found = true;
                        break;
                    }
                }
                if !found {
                    self.toast_queue.lock().unwrap().push(Toast {
                        kind: ToastKind::Error,
                        text: format!("Clickpack \"{name}\" not found").into(),
                        options: ToastOptions::default().duration_in_seconds(3.0),
                    })
                }
            }
            ClickpackEnv::Path(path) => {
                preload_clickpack(path.clone());
            }
            ClickpackEnv::None => log::info!("env.json doesn't specify a clickpack"),
        }

        // init game hooks
        #[cfg(not(feature = "geode"))]
        {
            log::debug!("initializing hooks");
            unsafe { hooks::init_hooks().unwrap() };
        }
    }

    #[inline]
    fn is_in_level(&self) -> bool {
        #[cfg(feature = "geode")]
        return self.is_in_level;
        #[cfg(not(feature = "geode"))]
        return !self.playlayer.is_null();
    }

    fn get_pitch(&self) -> f64 {
        if self.conf.pitch_enabled {
            utils::f64_range(self.conf.pitch.from..=self.conf.pitch.to)
        } else {
            1.0
        }
    }

    #[allow(unused_variables)]
    pub fn on_init(&mut self, playlayer: usize) {
        #[cfg(not(feature = "geode"))]
        {
            self.playlayer.addr = playlayer;
        }

        self.prev_times = ClickTimes::default();
        self.prev_click_type = ClickType::None;
        self.prev_pitch = 0.0;
        self.prev_volume = self.conf.volume_settings.global_volume;
        self.prev_spam_offset = 0.0;
    }

    pub fn on_exit(&mut self) {
        #[cfg(feature = "geode")]
        {
            self.is_in_level = false;
        }
        self.on_init(0);
    }

    pub unsafe fn on_action(&mut self, button: Button, player2: bool, push: bool) {
        #[cfg(not(feature = "geode"))]
        if self.playlayer.is_null() {
            return;
        }
        if self.clickpack.num_sounds == 0 || !self.is_in_level() || !self.conf.enabled {
            return;
        }
        #[cfg(not(feature = "geode"))]
        if self.playlayer.is_paused()
            || self.time() == 0.0
            || (!self.playlayer.level_settings().is_2player() && player2)
        {
            return;
        }

        let now = self.time();
        let prev_time = self.prev_times.get_prev_time(button, player2);
        let dt = (now - prev_time).abs();
        let click_type = ClickType::from_time(push, dt, &self.conf.timings);
        let use_fmod = self.conf.use_fmod;

        // get click
        let mut click = self
            .clickpack
            .get_random_click(click_type, player2, button)
            .sound
            .clone();
        let pitch = self.get_pitch() * self.conf.click_speedhack;
        // if self.conf.sync_speed_with_game {
        //     pitch *= gd_audio_pitch() as f64;
        // }
        if !use_fmod {
            click.set_playback_rate(PlaybackRate::Factor(pitch));
        }

        // compute & change volume
        {
            let vol = &self.conf.volume_settings;
            let mut volume = 1.0;
            if vol.volume_var != 0.0 {
                volume += utils::f64_range(-vol.volume_var..=vol.volume_var);
            }

            // calculate spam volume change
            if (push || vol.change_releases_volume) && dt < vol.spam_time && vol.enabled {
                let offset = (vol.spam_time - dt) * vol.spam_vol_offset_factor;
                self.prev_spam_offset = offset;
                volume -= offset.min(vol.max_spam_vol_offset);
            } else {
                self.prev_spam_offset = 0.0;
            }

            // multiply by global volume after all of the changes
            volume *= vol.global_volume;

            if !use_fmod {
                // blehh
                click.set_volume(volume as f32);
            }
            self.prev_volume = volume;
        }

        // stop all playing sounds (acb behaviour)
        if !use_fmod
            && self.conf.cut_sounds
            && (!click_type.is_release() || self.conf.cut_by_releases)
        {
            for sound in &self.mixer.renderer.guard().sounds {
                // check if this is the noise sound, we don't want to stop it
                let sound_len = sound.guard().frames.len();
                if let Some(noise_sound) = &self.noise_sound {
                    if noise_sound.guard().frames.len() == sound_len {
                        continue;
                    }
                }

                // kis!!
                sound.seek_to_end();
            }
        }
        // FIXME: 22 fix
        if !use_fmod || true {
            self.mixer.play(click);
        } else {
            /*
            unsafe {
                FMOD_System_PlaySound(
                    self.system,
                    click.fmod_sound,
                    std::ptr::null_mut(),
                    0,
                    &mut self.channel,
                );
                FMOD_Channel_SetPitch(self.channel, pitch as f32);
                FMOD_Channel_SetVolume(self.channel, self.prev_volume);
                FMOD_System_Update(self.system);
            }
            */
        }
        self.prev_times.set_time(button, player2, now);
        self.prev_click_type = click_type;
        self.prev_pitch = pitch;
    }

    #[inline]
    fn time(&self) -> f64 {
        #[cfg(feature = "geode")]
        {
            self.playlayer_time
        }
        #[cfg(not(feature = "geode"))]
        {
            self.playlayer.time()
        }
    }

    fn open_clickbot_toggle_toast(&self, toasts: &mut Toasts) {
        toasts.add(Toast {
            kind: ToastKind::Info,
            text: if self.conf.enabled {
                "Enabled clickbot".into()
            } else {
                "Disabled clickbot".into()
            },
            options: ToastOptions::default().duration_in_seconds(2.0),
        });
    }

    fn reload_clickpacks(&mut self) -> Result<()> {
        let path = Path::new(".zcb/clickpacks");
        std::fs::create_dir_all(path)?;
        let dir = path.read_dir()?;
        self.clickpacks.clear();
        for entry in dir {
            let entry = entry?;
            let path = entry.path();
            if path.is_dir() {
                self.clickpacks.push(path);
            }
        }
        Ok(())
    }

    pub fn draw_ui(&mut self, ctx: &egui::Context) {
        // process hotkeys
        let wants_keyboard = ctx.wants_keyboard_input();
        let (toggle_menu, toggle_bot, toggle_noise) = ctx.input_mut(|i| {
            // for some reason it deadlocks when i put `ctx.wants_keyboard_input()` here?
            if wants_keyboard {
                (false, false, false)
            } else {
                (
                    self.conf.shortcuts.toggle_menu.pressed(i),
                    self.conf.shortcuts.toggle_bot.pressed(i),
                    self.conf.shortcuts.toggle_noise.pressed(i),
                )
            }
        });
        if toggle_menu {
            self.conf.hidden = !self.conf.hidden;
        }
        if toggle_bot {
            self.conf.enabled = !self.conf.enabled;
        }
        if toggle_noise {
            self.conf.play_noise = !self.conf.play_noise;
            self.play_noise();
        }

        // auto-save config
        if self.last_conf_save.elapsed() > Duration::from_secs(2)
            && self.conf != self.prev_conf
            && !self.did_reset_config
        {
            self.conf.save();
            self.last_conf_save = Instant::now();
            self.prev_conf = self.conf.clone();
        }

        // don't draw/autosave if not open
        if self.conf.hidden {
            return;
        }

        // clickpack reloading
        if self.last_clickpack_reload.elapsed() > Duration::from_secs(3) {
            let _ = self
                .reload_clickpacks()
                .map_err(|e| log::error!("failed to reload clickpacks: {e}"));
            self.last_clickpack_reload = Instant::now();
        }

        // draw overlay
        let modal = Arc::new(Mutex::new(Modal::new(ctx, "global_modal")));
        let mut toasts = Toasts::new()
            .anchor(Align2::RIGHT_BOTTOM, pos2(-16.0, -16.0))
            .direction(Direction::BottomUp);

        if toggle_bot {
            self.open_clickbot_toggle_toast(&mut toasts);
        }
        if toggle_noise {
            self.open_noise_toggle_toast(&mut toasts);
        }

        // show all queued toasts
        for toast in self.toast_queue.lock().unwrap().drain(..) {
            toasts.add(toast);
        }

        // remove tooltip delay
        ctx.style_mut(|s| s.interaction.tooltip_delay = 0.0);

        egui::Window::new("ZCB Live").show(ctx, |ui| {
            ui.horizontal(|ui| {
                ui.selectable_value(&mut self.conf.stage, Stage::Clickpack, "Clickpack");
                ui.selectable_value(&mut self.conf.stage, Stage::Audio, "Audio");
                ui.selectable_value(&mut self.conf.stage, Stage::Options, "Options");
                // ui.selectable_value(&mut self.conf.stage, Stage::Cheats, "Cheats");
            });
            ui.separator();

            egui::ScrollArea::both().show(ui, |ui| {
                match self.conf.stage {
                    Stage::Clickpack => self.show_clickpack_window(ui, modal.clone()),
                    Stage::Audio => {
                        if ui
                            .checkbox(&mut self.conf.enabled, "Enable clickbot")
                            .changed()
                        {
                            self.open_clickbot_toggle_toast(&mut toasts);
                        }

                        // ui.separator();
                        ui.add_enabled_ui(self.conf.enabled, |ui| {
                            self.show_audio_window(ui, &mut toasts);
                        });
                    }
                    Stage::Options => self.show_options_window(ui, modal.clone(), &mut toasts),
                };
            });
        });

        toasts.show(ctx);
        modal.lock().unwrap().show_dialog();
    }

    #[cfg(not(features = "geode"))]
    pub fn maybe_alloc_console(&self) {
        if self.conf.show_console {
            if unsafe { AllocConsole() }.is_ok() {
                static INIT_ONCE: Once = Once::new();
                INIT_ONCE.call_once(|| {
                    simple_logger::SimpleLogger::new()
                        .init()
                        .expect("failed to initialize simple_logger");
                });
            }
        }
    }

    fn show_options_window(
        &mut self,
        ui: &mut egui::Ui,
        modal: Arc<Mutex<Modal>>,
        toasts: &mut Toasts,
    ) {
        ui.collapsing("Shortcuts", |ui| {
            let mut show_shortcut = |shortcut: &mut Shortcut, id: &'static str, name: &str| {
                ui.horizontal(|ui| {
                    ui.vertical(|ui| ui.add(Keybind::new(shortcut, id).with_text(name)));
                    if *shortcut != Shortcut::NONE {
                        if ui
                            .button("Clear")
                            .on_hover_text("Set the shortcut to none")
                            .clicked()
                        {
                            *shortcut = Shortcut::NONE;
                        }
                    }
                });
            };
            show_shortcut(
                &mut self.conf.shortcuts.toggle_menu,
                "toggle_menu_keybind",
                "Toggle menu",
            );
            show_shortcut(
                &mut self.conf.shortcuts.toggle_bot,
                "toggle_bot_keybind",
                "Toggle bot",
            );
            show_shortcut(
                &mut self.conf.shortcuts.toggle_noise,
                "toggle_noise_keybind",
                "Toggle noise",
            );
        });
        ui.collapsing("Configuration", |ui| {
            ui.horizontal(|ui| {
                help_text(
                    ui,
                    "Use an alternate pushButton/releaseButton hook for bot compatibility",
                    |ui| ui.checkbox(&mut self.conf.use_alternate_hook, "Use alternate hook"),
                );
            });
            #[cfg(not(features = "geode"))]
            help_text(ui, "Show debug console", |ui| {
                if ui
                    .checkbox(&mut self.conf.show_console, "Show console")
                    .changed()
                {
                    if self.conf.show_console {
                        self.maybe_alloc_console();
                    } else {
                        let _ = unsafe { FreeConsole() };
                    }
                }
            });
            help_text(
                ui,
                "Synchronize actions with the timestep of the game",
                |ui| ui.checkbox(&mut self.conf.use_playlayer_time, "Use PlayLayer time"),
            );

            ui.horizontal(|ui| {
                ui.style_mut().spacing.item_spacing.x = 4.0;
                if ui
                    .button("Save")
                    .on_hover_text(
                        "Save the current configuration.\n\
                        This happens automatically, unless you reset your config!",
                    )
                    .clicked()
                {
                    self.conf.save();
                    self.did_reset_config = false;
                    self.prev_conf = self.conf.clone();
                    toasts.add(Toast {
                        kind: ToastKind::Success,
                        text: "Saved configuration to .zcb/config.json".into(),
                        options: ToastOptions::default().duration_in_seconds(2.0),
                    });
                }
                if self.conf != self.prev_conf {
                    ui.style_mut().spacing.item_spacing.x = 4.0;
                    ui.label("(!)").on_hover_text("Unsaved changes");
                }
                ui.style_mut().spacing.item_spacing.x = 4.0;
                if ui
                    .button("Load")
                    .on_hover_text("Load the config from .zcb/config.json")
                    .clicked()
                {
                    let conf = Config::load();
                    if let Ok(conf) = conf {
                        self.conf = conf;
                        self.apply_config();
                        toasts.add(Toast {
                            kind: ToastKind::Success,
                            text: "Loaded configuration from .zcb/config.json".into(),
                            options: ToastOptions::default().duration_in_seconds(2.0),
                        });
                    } else if let Err(e) = conf {
                        modal
                            .lock()
                            .unwrap()
                            .dialog()
                            .with_title("Failed to load config!")
                            .with_body(utils::capitalize_first_letter(&e.to_string()))
                            .with_icon(Icon::Error)
                            .open();
                    }
                }
                ui.style_mut().spacing.item_spacing.x = 4.0;
                if ui
                    .button("Reset")
                    .on_hover_text("Reset the current configuration to defaults")
                    .clicked()
                {
                    let prev_stage = self.conf.stage;
                    self.conf = Config::default();
                    self.conf.stage = prev_stage; // don't switch current tab
                    self.did_reset_config = true;
                    self.apply_config();
                    toasts.add(Toast {
                        kind: ToastKind::Info,
                        text: "Reset configuration to defaults".into(),
                        options: ToastOptions::default().duration_in_seconds(2.0),
                    });
                }
                if ui
                    .button("Open folder")
                    .on_hover_text("Open .zcb folder")
                    .clicked()
                {
                    let _ = std::fs::create_dir_all(".zcb")
                        .map_err(|e| log::error!("failed to create .zcb: {e}"));
                    Command::new("explorer").arg(".zcb").spawn().unwrap();
                }
            });
            ui.label(format!(
                "Last saved {:.2?}s ago",
                self.last_conf_save.elapsed().as_secs_f32()
            ));
        });
        ui.allocate_space(ui.available_size() - vec2(0.0, 280.0));
    }

    fn get_device(&mut self) -> Device {
        log::debug!("using default device");
        Device::Default
    }

    fn play_noise(&mut self) {
        let stop_kittyaudio_noise = |noise_sound: &mut Option<SoundHandle>| {
            if let Some(noise_sound) = noise_sound {
                noise_sound.set_playback_rate(PlaybackRate::Factor(1.0));
                noise_sound.set_loop_enabled(false);
                noise_sound.seek_to_end();
            }
            *noise_sound = None;
        };
        // let stop_fmod_noise = |fmodn: &mut *mut FMOD_CHANNEL| {
        //     unsafe { FMOD_Channel_Stop(*fmodn) };
        //     *fmodn = std::ptr::null_mut();
        // };
        let mut start_kittyaudio_noise = |noise_sound: &mut Option<SoundHandle>| {
            if let Some(mut noise) = self.clickpack.noise.clone() {
                noise.set_volume(self.conf.noise_volume as f32);
                noise.set_loop_enabled(true);
                let frames = noise.frames.len().saturating_sub(1);
                noise.set_loop_index(0..=frames);
                noise.set_playback_rate(PlaybackRate::Factor(self.conf.noise_speedhack));
                *noise_sound = Some(self.mixer.play(noise.sound));
            }
        };
        /*
        let start_fmod_noise = |fmodn: &mut *mut FMOD_CHANNEL| unsafe {
            if let Some(noise) = self.noise.clone() {
                // get sound length
                // let mut length = 0u32;
                // FMOD_Sound_GetLength(noise.fmod_sound, &mut length, FMOD_TIMEUNIT_PCM);

                // set loop points for sound
                FMOD_Sound_SetLoopCount(noise.fmod_sound, i32::MAX);
                // FMOD_Sound_SetLoopPoints(
                //     noise.fmod_sound,
                //     0,
                //     FMOD_TIMEUNIT_PCM,
                //     length,
                //     FMOD_TIMEUNIT_PCM,
                // );

                // play the sound
                FMOD_System_PlaySound(
                    self.system,
                    noise.fmod_sound,
                    std::ptr::null_mut(),
                    0,
                    fmodn,
                );

                // update channel
                FMOD_Channel_SetVolume(*fmodn, self.conf.noise_volume);
                // FMOD_Channel_SetLoopPoints(*fmodn, 0, FMOD_TIMEUNIT_PCM, 1024, FMOD_TIMEUNIT_PCM);
                FMOD_Channel_SetLoopCount(*fmodn, i32::MAX);
                FMOD_Channel_SetPitch(*fmodn, self.conf.noise_speedhack as f32);
                FMOD_System_Update(self.system);
            }
        };
        */

        stop_kittyaudio_noise(&mut self.noise_sound);
        // stop_fmod_noise(&mut self.fmod_noise_sound);

        if self.conf.use_fmod {
            // if self.conf.play_noise {
            //     start_fmod_noise(&mut self.fmod_noise_sound);
            // } else {
            //     stop_fmod_noise(&mut self.fmod_noise_sound);
            // }
        } else if self.conf.play_noise {
            start_kittyaudio_noise(&mut self.noise_sound);
        } else {
            stop_kittyaudio_noise(&mut self.noise_sound);
        }
    }

    fn open_noise_toggle_toast(&self, toasts: &mut Toasts) {
        toasts.add(Toast {
            kind: ToastKind::Info,
            text: if self.conf.play_noise {
                "Playing noise".into()
            } else {
                "Stopped playing noise".into()
            },
            options: ToastOptions::default().duration_in_seconds(2.0),
        });
    }

    #[inline]
    fn is_loading_clickpack(&self) -> bool {
        self.is_loading_clickpack.load(Ordering::Relaxed)
    }

    fn show_audio_window(&mut self, ui: &mut egui::Ui, toasts: &mut Toasts) {
        ui.add_enabled_ui(
            self.clickpack.has_noise() && !self.is_loading_clickpack(),
            |ui| {
                ui.horizontal(|ui| {
                    if ui
                        .checkbox(&mut self.conf.play_noise, "Play noise")
                        .on_disabled_hover_text("Your clickpack doesn't have a noise file")
                        .on_hover_text("Play the noise file")
                        .changed()
                    {
                        self.play_noise();
                        self.open_noise_toggle_toast(toasts);
                    }

                    if drag_value(
                        ui,
                        &mut self.conf.noise_volume,
                        "Noise volume",
                        0.0..=f64::INFINITY,
                        "",
                    )
                    .drag_released()
                    {
                        self.play_noise(); // restart noise
                    }
                });
            },
        );

        /*
        help_text(
            ui,
            "Use the internal audio engine for integration with internal recorders",
            |ui| {
                if ui.checkbox(&mut self.conf.use_fmod, "Use FMOD").changed() {
                    if self.conf.use_fmod {
                        log::info!("destroying kittyaudio mixer");
                        self.mixer = Mixer::new();
                    } else {
                        self.maybe_init_kittyaudio();
                    }
                    self.play_noise();
                }
            },
        );
        */
        ui.separator();

        ui.collapsing("Timings", |ui| {
            let timings_copy = self.conf.timings.clone();
            let timings = &mut self.conf.timings;
            drag_value(
                ui,
                &mut timings.hard,
                "Hard timing",
                timings_copy.regular..=f64::INFINITY,
                "Anything above this time between clicks plays hardclicks/hardreleases",
            );
            drag_value(
                ui,
                &mut timings.regular,
                "Regular timing",
                timings_copy.soft..=timings_copy.hard,
                "Anything above this time between clicks plays clicks/releases",
            );
            drag_value(
                ui,
                &mut timings.soft,
                "Soft timing",
                0.0..=timings_copy.regular,
                "Anything above this time between clicks plays softclicks/softreleases",
            );
            ui.label(format!(
                "Any value smaller than {:.2?} plays microclicks/microreleases",
                Duration::from_secs_f64(timings.soft),
            ))
        });

        ui.collapsing("Pitch variation", |ui| {
            ui.label(
                "Pitch variation can make clicks sound more realistic by \
                    changing their pitch randomly.",
            );
            ui.checkbox(&mut self.conf.pitch_enabled, "Enable pitch variation");
            ui.add_enabled_ui(self.conf.pitch_enabled, |ui| {
                let p = &mut self.conf.pitch;
                drag_value(
                    ui,
                    &mut p.from,
                    "Minimum pitch",
                    0.0..=p.to,
                    "Minimum pitch value, 1.0 means no change",
                );
                drag_value(
                    ui,
                    &mut p.to,
                    "Maximum pitch",
                    p.from..=f64::INFINITY,
                    "Maximum pitch value, 1.0 means no change",
                );
            });
        });

        ui.collapsing("Volume settings", |ui| {
            help_text(
                ui,
                "Cut overlapping click sounds,\n\
                changes the sound significantly in spams",
                |ui| ui.checkbox(&mut self.conf.cut_sounds, "Cut sounds"),
            );
            if self.conf.cut_sounds {
                help_text(ui, "Allow clicks to be cut by releases", |ui| {
                    ui.checkbox(&mut self.conf.cut_by_releases, "Cut by releases")
                });
            }
            let vol = &mut self.conf.volume_settings;
            drag_value(
                ui,
                &mut vol.global_volume,
                "Global volume",
                0.0..=f64::INFINITY,
                "Constant volume multiplier for all sounds",
            );
            drag_value(
                ui,
                &mut vol.volume_var,
                "Volume variation",
                0.0..=f64::INFINITY,
                "Random volume variation (+/-)",
            );
        });

        ui.collapsing("Spam volume changes", |ui| {
            ui.label("This can be used to lower volume in spams");
            let vol = &mut self.conf.volume_settings;
            help_text(ui, "Apply this logic to releases", |ui| {
                ui.checkbox(&mut vol.change_releases_volume, "Change releases volume")
            });
            drag_value(
                ui,
                &mut vol.spam_time,
                "Spam time",
                0.0..=f64::INFINITY,
                "Time between clicks which are considered spam clicks",
            );
            drag_value(
                ui,
                &mut vol.spam_vol_offset_factor,
                "Spam volume offset factor",
                f64::NEG_INFINITY..=f64::INFINITY,
                "The value which the volume offset factor is multiplied by",
            );
            drag_value(
                ui,
                &mut vol.max_spam_vol_offset,
                "Maximum volume offset",
                f64::NEG_INFINITY..=f64::INFINITY,
                "The maximum value of the volume offset",
            );
        });

        ui.collapsing("Speed", |ui| {
            ui.label("Adjust audio speed/pitch");
            ui.horizontal(|ui| {
                drag_value(
                    ui,
                    &mut self.conf.click_speedhack,
                    "Click speedhack",
                    0.0..=f64::INFINITY,
                    "Speed multiplier for clicks/releases",
                );
                if self.conf.click_speedhack != 1.0 && ui.button("Reset").clicked() {
                    self.conf.click_speedhack = 1.0;
                }
            });
            ui.horizontal(|ui| {
                if drag_value(
                    ui,
                    &mut self.conf.noise_speedhack,
                    "Noise speedhack",
                    0.0..=f64::INFINITY,
                    "Speed multiplier for noise. Only useful if your clickpack has a noise file",
                )
                .drag_released()
                {
                    self.play_noise();
                }
                if self.conf.noise_speedhack != 1.0 && ui.button("Reset").clicked() {
                    self.conf.noise_speedhack = 1.0;
                    self.play_noise();
                }
            });
            // help_text(ui, "Synchronize click speedhack with game speed", |ui| {
            //     ui.checkbox(&mut self.conf.sync_speed_with_game, "Sync speed with game")
            // });
        });

        ui.collapsing("Advanced", |ui| {
            // let last_bufsize = self.mixer.renderer.guard().last_buffer_size;
            // ui.label(format!("Real buffer size: {last_bufsize}"));

            let prev_bufsize = self.conf.buffer_size;
            help_text(
                ui,
                "Audio buffer size in samples.\nLower value means lower latency",
                |ui| {
                    ui.label("Buffer size");
                },
            );
            if u32_edit_field_min1(ui, &mut self.conf.buffer_size).changed() {
                self.buffer_size_changed = prev_bufsize != self.conf.buffer_size;
            }

            if self.buffer_size_changed {
                ui.horizontal(|ui| {
                    if ui
                        .button("Apply")
                        .on_hover_text("Apply buffer size changes")
                        .clicked()
                    {
                        if !self.conf.use_fmod {
                            self.maybe_init_kittyaudio();
                            self.play_noise();
                        } else {
                            self.show_fmod_buffersize_warn = true;
                        }
                        self.buffer_size_changed = false;
                    }

                    if self.conf.buffer_size > 300_000 {
                        ui.label(
                            RichText::new("WARN: Using a high buffer size might cause instability")
                                .color(Color32::YELLOW),
                        );
                    }
                });
            }
            if self.show_fmod_buffersize_warn && self.conf.buffer_size != self.startup_buffer_size {
                ui.label(
                    RichText::new("WARN: Restart the game to apply FMOD buffer size changes")
                        .color(Color32::YELLOW),
                );
            }
            if self.conf.use_fmod && self.startup_buffer_size < 10 {
                ui.label(
                    "If you don't hear any audio, it might be because your buffer size is set too low. \
                    The recommended value for FMOD is 10."
                );
            }
        });

        ui.allocate_space(vec2(100.0, 0.0));
    }

    fn apply_config(&mut self) {
        self.maybe_init_kittyaudio();
        self.play_noise();
    }

    fn unload_clickpack(&mut self) {
        self.clickpack = Clickpack::default();
    }

    fn load_clickpack_thread(
        err_fn: impl Fn(anyhow::Error),
        dir: &Path,
        is_loading_clickpack: Arc<AtomicBool>,
    ) {
        unsafe {
            is_loading_clickpack.store(true, Ordering::Relaxed);
            if let Ok(clickpack) = Clickpack::from_path(dir).map_err(|e| {
                log::error!("failed to load clickpack: {e}");
                err_fn(e);
            }) {
                BOT.clickpack = clickpack;
            }
            is_loading_clickpack.store(false, Ordering::Relaxed);
        }
    }

    fn select_clickpack_combobox(&mut self, ui: &mut egui::Ui, modal: Arc<Mutex<Modal>>) {
        let ellipsis = if self.clickpack.name.len() <= 14 {
            self.clickpack.name.clone()
        } else {
            format!("{:.14}…", self.clickpack.name)
        };
        egui::ComboBox::from_label("Select clickpack")
            .selected_text(ellipsis)
            .show_ui(ui, |ui| {
                for path in &self.clickpacks {
                    let dirname = path.file_name().unwrap().to_str().unwrap();
                    let is_loading_clickpack = self.is_loading_clickpack.clone();
                    if ui
                        .selectable_label(self.clickpack.name == dirname, dirname)
                        .clicked()
                    {
                        let modal_moved = modal.clone();
                        let path = path.clone();
                        let dirname_moved = dirname.to_string();
                        std::thread::spawn(move || {
                            Self::load_clickpack_thread(
                                |e| {
                                    modal_moved
                                        .lock()
                                        .unwrap()
                                        .dialog()
                                        .with_title("Failed to load clickpack!")
                                        .with_body(utils::capitalize_first_letter(&e.to_string()))
                                        .with_icon(Icon::Error)
                                        .open();
                                },
                                &path,
                                is_loading_clickpack,
                            );
                            unsafe { BOT.env.update(ClickpackEnv::Name(dirname_moved)) };
                        });
                    }
                }
            });
    }

    fn select_clickpack_button(&mut self, ui: &mut egui::Ui, modal: Arc<Mutex<Modal>>) -> bool {
        if !self.clickpacks.is_empty() {
            self.select_clickpack_combobox(ui, modal);
            return true;
        }
        ui.horizontal(|ui| {
            if ui
                .button("Select clickpack")
                .on_disabled_hover_text("Please wait...")
                .clicked()
            {
                let is_loading_clickpack = self.is_loading_clickpack.clone();
                std::thread::spawn(move || {
                    let Some(dir) = FileDialog::new().pick_folder() else {
                        return;
                    };
                    log::debug!("selected clickpack {:?}", dir);
                    Self::load_clickpack_thread(
                        |e| {
                            modal
                                .lock()
                                .unwrap()
                                .dialog()
                                .with_title("Failed to load clickpack!")
                                .with_body(utils::capitalize_first_letter(&e.to_string()))
                                .with_icon(Icon::Error)
                                .open();
                        },
                        &dir,
                        is_loading_clickpack,
                    );
                    unsafe {
                        BOT.env.update(ClickpackEnv::Path(dir));
                    }
                });
            }
            if self.clickpack.num_sounds != 0 {
                ui.label(format!("Selected clickpack: \"{}\"", self.clickpack.name));
            } else {
                ui.label("...or put clickpacks in .zcb/clickpacks");
            }
        });
        false
    }

    fn show_clickpack_window(&mut self, ui: &mut egui::Ui, modal: Arc<Mutex<Modal>>) {
        let is_loading_clickpack = self.is_loading_clickpack();
        if is_loading_clickpack {
            ui.horizontal(|ui| {
                ui.label("Loading clickpack...");
                ui.add(egui::Spinner::new());
            });
        }

        ui.add_enabled_ui(!is_loading_clickpack, |ui| {
            if !self.clickpacks.is_empty() {
                help_text(
                    ui,
                    "If there's no folders inside .zcb/clickpacks,\n\
                    there will be an option to choose the clickpack manually",
                    |ui| {
                        ui.label("Put clickpacks in .zcb/clickpacks");
                    },
                );
            }

            let show_open_folder = |ui: &mut egui::Ui| {
                if ui
                    .button("Open folder")
                    .on_hover_text("Open .zcb/clickpacks")
                    .clicked()
                {
                    let _ = std::fs::create_dir_all(".zcb/clickpacks")
                        .map_err(|e| log::error!("failed to create .zcb/clickpacks: {e}"));
                    Command::new("explorer")
                        .arg(".zcb\\clickpacks")
                        .spawn()
                        .unwrap();
                }
            };

            let mut is_combobox = false;
            ui.horizontal(|ui| {
                is_combobox = self.select_clickpack_button(ui, modal);
                if !self.clickpack.name.is_empty() {
                    ui.style_mut().spacing.item_spacing.x = 4.0;
                    if ui.button("🗙").on_hover_text("Unload clickpack").clicked() {
                        self.unload_clickpack();
                    }
                }
                if is_combobox {
                    show_open_folder(ui);
                }
            });
            if !is_combobox {
                show_open_folder(ui);
            }
        });

        if self.clickpack.num_sounds != 0 {
            help_text(
                ui,
                "To add player 2 sounds, make a folder called \"player2\"\n\
                and put sounds for the second player there",
                |ui| {
                    ui.label(format!("{} sounds", self.clickpack.num_sounds));
                },
            );
        }

        if !is_loading_clickpack && self.is_in_level() {
            ui.separator();
            ui.collapsing("Debug", |ui| {
                ui.label("Last click times:");
                egui::Grid::new("times_grid")
                    .num_columns(2)
                    .striped(true)
                    .show(ui, |ui| {
                        for times in [
                            self.prev_times.jump,
                            self.prev_times.left,
                            self.prev_times.right,
                        ] {
                            for t in times {
                                ui.label(format!("{:.3?}", t));
                            }
                            ui.end_row();
                        }
                    });
                ui.label(format!("Last click type: {:?}", self.prev_click_type));
                ui.label(format!(
                    "Last pitch: {:.4} ({}..={})",
                    self.prev_pitch, self.conf.pitch.from, self.conf.pitch.to
                ));
                ui.label(format!(
                    "Last volume: {:.4} (+/- {} * {})",
                    self.prev_volume,
                    self.conf.volume_settings.volume_var,
                    self.conf.volume_settings.global_volume
                ));
                ui.label(format!(
                    "Last spam volume offset: {:.4}",
                    self.prev_spam_offset
                ));

                let format_path_keep_root = |path: &Path| path.to_string_lossy().replace("\\", "/");

                ui.label(format!(
                    "Clickpack path: {:?}",
                    format_path_keep_root(&self.clickpack.path)
                ));
                // ui.label(format!("Is 2-player level / forced? {}", self.is_2player()));
            });
        }
    }
}

impl Drop for Bot {
    fn drop(&mut self) {
        // self.unload_clickpack();
        self.release_fmod()
    }
}
